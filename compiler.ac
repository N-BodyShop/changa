# Compiler-specific options for ChaNGa

# @synopsis COMPILER_FLAG_REQUIRE [compiler flag]
# @summary Require compiler to support given flag                   
AC_DEFUN([COMPILER_FLAG_REQUIRE],
[dnl
	AC_MSG_CHECKING([if $CXX supports $1])
	AC_LANG_PUSH([C++])
	ac_saved_cxxflags="$CXXFLAGS"
	CXXFLAGS="-Werror $1"
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],
		[AC_MSG_RESULT([yes])],
		[AC_MSG_ERROR([$2])]
	)
	CXXFLAGS="$ac_saved_cxxflags"
	AC_LANG_POP([C++])
])

dnl @synopsis COMPILER_MACRO_CHECK [compiler macro]
dnl @summary check whether compiler supports given macro or not                   
AC_DEFUN([COMPILER_MACRO_CHECK],
[dnl
	AC_LANG_PUSH([C++])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
		[[#ifndef $1
	  	  # error
	  	  #endif
		]])],
		[$2=yes],
		[$2=no]
	)
	AC_LANG_POP([C++])
])
#------------------------------------------------------------------------------

# Require C++11
COMPILER_FLAG_REQUIRE([-std=c++11],[ChaNGa requires full C++11 support])

COMPILER_MACRO_CHECK([__GNUC__],[IS_GNU])
COMPILER_MACRO_CHECK([__ICC__],[IS_ICC])
