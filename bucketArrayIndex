smooth.C:740:	  // With round-off, we might be in the LowhFix regime and
Compute.C:1756:              int gpuIndex = lpi.nd->bucketArrayIndex;
Compute.C:1795:              int gpuIndex = lpi.nd->bucketArrayIndex;
Compute.C:1799:                lpi.nd->bucketArrayIndex = gpuIndex;
TreePiece.cpp:657:        if (interpolatedBound->key <= dummy.key) {
TreePiece.cpp:1884:		  // uold could be negative because of round-off
TreePiece.cpp:4123:    CkLoop_Parallelize(doCalcEwald, 1, lpdata, num_chunks, start, end-1, 1, &timeforckloop, CKLOOP_DOUBLE_SUM);
TreePiece.cpp:4496:    gravityState->counterArrays[1][chunkNum] -= (end-curbucket);
TreePiece.cpp:4562:    CkLoop_Parallelize(doWorkForCkLoop, 1, lpdata, num_chunks, start, end-1, 1, &timeforckloop, CKLOOP_DOUBLE_SUM);
TreePiece.cpp:4690:    for(int j = 0; j <= buckEnd-buckStart; j++){
TreePiece.cpp:4716:    for(int j = 0; j <= buckEnd-buckStart; j++){
InOutput.C:1461:	    for(binEnd = binBegin; binEnd->iOrder < startParticle[iPiece+1];
InOutput.C:1504:	for(binEnd = binBegin; binEnd->iOrder < startParticle[iPiece+1];
InOutput.C:1565:			 (binEnd-binBegin));
Orb3dLB.C:235:  int nn = nodeend-nodestart;
Orb3dLB.C:241:    int totalTp = tpend-tpstart;
Orb3dLB.C:288:  CkAssert(nodestart==(nodeend-1));
Orb3dLB.C:395:  int np = nodeend-nodestart;
DataManager.cpp:612:        nd->nodeArrayIndex = index; \
DataManager.cpp:613:        list.push_back(CudaMultipoleMoments(nd->moments));\
DataManager.cpp:614:        CkPrintf("(%d) node %d: %ld (%s)\n", CkMyPe(), index, nd->getKey(), typeString(type));\
DataManager.cpp:619:        nd->nodeArrayIndex = index; \
DataManager.cpp:620:        list->push_back(CudaMultipoleMoments(nd->moments));\
DataManager.cpp:621:        CkPrintf("(%d) node %d: %ld (%s)\n", CkMyPe(), index, nd->getKey(), typeString(type));\
DataManager.cpp:628:        nd->nodeArrayIndex = index; \
DataManager.cpp:629:        list.push_back(CudaMultipoleMoments(nd->moments));\
DataManager.cpp:634:        nd->nodeArrayIndex = index; \
DataManager.cpp:635:        list->push_back(CudaMultipoleMoments(nd->moments));\
DataManager.cpp:726:      if (p != ctPart->end() && p->second->replyRecvd) {
DataManager.cpp:729:        parts = (ExternalGravityParticle *)p->second->data;
DataManager.cpp:753:          if (p != ctNode->end() && p->second->replyRecvd) {
DataManager.cpp:755:    	    queue.enq((GenericTreeNode *)p->second->data);
