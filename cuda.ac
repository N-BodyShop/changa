# ----------------------------------------------------------------
# CUDA support
#
# Here we define and process a `--with-cuda[=PREFIX]` option.
#
# If the option is not given, or is given without an argument or with an
# argument of "yes", we search for CUDA in the following locations:
#
#   /usr/local/cuda			standard CUDA install directory
#
#   /usr/lib/nvidia-cuda-toolkit 	install directory for the system-
#					installed CUDA toolkit package on Debian
#                                       and Debian-based systems
#
# There are some arguments to AC_MSG_* with ugly formatting here; the formatting
# is intentional (it produces nice, readable output in the generated `configure`
# script).
#
# To disable automatic "use" of CUDA (i.e., setting ENABLE_CUDA to "yes" if CUDA
# is found), change the assigned value of `ENABLE_CUDA` in the line directly
# below this comment to "no".  (You should also change the default-argument
# value in the docstring passed to `AS_HELP_STRING` to match.)
ENABLE_CUDA="auto"

AC_ARG_VAR([CUDA_DIR], [CUDA toolkit install directory])
AC_ARG_WITH([cuda],
        [AS_HELP_STRING([--with-cuda@<:@=PATH@:>@],
                [use CUDA (installed in PATH) @<:@auto@:>@])],
        [CUDA_DIR=$withval],[CUDA_DIR=""])

# Interpret "--with-cuda" (i.e. no argument) as "enable CUDA support, please."
# We also support using the argument "auto" for this purpose.
if test "$CUDA_DIR" = "yes" || test "$CUDA_DIR" = "auto"; then
    ENABLE_CUDA="yes"
    CUDA_DIR=""
fi

if test "$ENABLE_CUDA" != "no"; then
    if test -z "$CUDA_DIR"; then
        CUDA_DIR_AUTOMATIC=yes
        AC_MSG_CHECKING([for CUDA toolkit directory])
        CUDA_CANDIDATE_DIRS="/usr/local/cuda /usr/lib/nvidia-cuda-toolkit"

        for dir in $CUDA_CANDIDATE_DIRS; do
            if test -d "$dir"; then
                CUDA_DIR="$dir"
                break
            fi
        done
        if test -z "$CUDA_DIR"; then
            if test "$ENABLE_CUDA" = "yes"; then
                # User explicitly requested CUDA support; being unable to find a
                # toolkit directory is an error.
                AC_MSG_RESULT(not found)
                AC_MSG_ERROR(\
[CUDA support explicitly enabled but the toolkit was not found by automatic path
    search.  Specify CUDA toolkit location with `--with-cuda=PATH`.])

            else
                AC_MSG_RESULT([not found.  CUDA support will be disabled.])
                ENABLE_CUDA=no
            fi
        else
            AC_MSG_RESULT($CUDA_DIR)
        fi
    fi
fi

if test "$ENABLE_CUDA" != "no"; then
    AC_PATH_PROG([NVCC_PATH],nvcc,[],[$CUDA_DIR/bin])
    if test -z "$NVCC_PATH" ; then
        if test "$ENABLE_CUDA" = "yes"; then
            if test "$CUDA_DIR_AUTOMATIC" = "yes"; then
                AC_MSG_ERROR(\
[`bin/nvcc` not found in automatically-selected CUDA toolkit directory.  Specify
    CUDA toolkit location with `--with-cuda=PATH`.])

            else
                AC_MSG_ERROR([`bin/nvcc` not found in specified CUDA install prefix.])
            fi
        else                    # ENABLE_CUDA is "auto"
            AC_MSG_NOTICE(\
[`bin/nvcc` not found in automatically-selected CUDA toolkit directory; CUDA
    support will be disabled.  If this is not what you want, try specifying a
    valid CUDA toolkit install prefix using `--with-cuda=PATH`.])
            ENABLE_CUDA="no"
        fi
    fi
fi

# Set up `ENABLE_CUDA` for use by Make.
if test "$ENABLE_CUDA" = "no"; then
    ENABLE_CUDA=""
else
    ENABLE_CUDA="yes"
fi

AC_SUBST([CUDA_DIR])
AC_SUBST([NVCC_PATH])
AC_SUBST([ENABLE_CUDA])

