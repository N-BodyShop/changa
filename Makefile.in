# This Makefile uses the GNU make convention that CAPITAL_NAMES are reserved
# for variables that are either derived from the environment or are explicitly
# set by the user during invocation.

.DEFAULT_GOAL := all

# ChaNGa source directory
source_dir := @srcdir@

# Directory from which `configure` was called.
build_dir := @builddir@

# ------- Basic commands ------------------------------------------------------
AR 		:= @AR@
RM 		:= rm -f
RMR		:= $(RM) -r
quiet	:= $(if $(filter $(VERBOSE),1),,@)

# ------- Top-level configurations --------------------------------------------
interlist := -DINTERLIST_VER=2	# enable interaction lists

# ------- Tree building: Use **ONLY ONE** of these ----------------------------
#	-DMERGE_REMOTE_REQUESTS		# merges remote requests before sending; local trees built after requests sent
#	-DSPLIT_PHASE_TREE_BUILD	# no merging of remote requests on PE; local trees built after requests sent
flag_tree_build := -DMERGE_REMOTE_REQUESTS

# ------- Debugging -----------------------------------------------------------
#	-DPRINT_MERGED_TREE 
#	-DCOSMO_PRINT=1       			# enable really verbose prints
#	-DCOSMO_PRINT_BK=2    			# enable verbose book-keeping prints
#	-DCOSMO_DEBUG=2       			# enable debugging information
#	-DMCLBMSV						# Multistepping LB verbosity
#	-DCOSMO_STATS=1					# enable statistics collection
#	-DCHANGA_REFACTOR_WALKCHECK
#	-DCHANGA_REFACTOR_WALKCHECK_INTERLIST
#	-DCHANGA_REFACTOR_MEMCHECK
#	-DCHANGA_REFACTOR_INTERLIST_PRINT_LIST_STATE
#	-DCHANGA_REFACTOR_PRINT_INTERACTIONS
# Check walk correctness and trace walk for TEST_BUCKET on TEST_TP:
#	-DCHANGA_REFACTOR_WALKCHECK_INTERLIST
#	-DCHANGA_REFACTOR_INTERLIST_PRINT_LIST_STATE
#	-DCHECK_WALK_COMPLETIONS
debug_defines =

ifeq (1,$(DEBUG))
	debug_defines += -DCOSMO_DEBUG=2
endif

# ------- Include paths -------------------------------------------------------
structures_path 	:= $(source_dir)/../utility/structures
charm_util_path 	:= @CHARM_PATH@/src/util
cache_lib_path 		:= @CHARM_PATH@/tmp/libs/ck-libs/cache
threadsafe_ht_path 	:= $(cache_lib_path)/threadsafe_hashtable

# ------- Modules to build ----------------------------------------------------
changa_modules := $(strip MultistepLB MultistepOrbLB MultistepLB_notopo	\
					MultistepNodeLB_notopo Orb3dLB Orb3dLB_notopo 		\
					HierarchOrbLB)

charm_modules := $(strip CkCache CkIO CkMulticast RefineLB RefineCommLB	\
					GreedyLB GreedyCommLB OrbLB RotateLB liveViz CkLoop)

# ------- Compiler setup -----------------------------------------------------
charmc 		:= @CHARM_PATH@/bin/charmc
target  	:= $(build_dir)/ChaNGa
charmrun	:= charmrun
cxx_std 	:= c++11
c_std		:= c99
OPT_FLAG	?= -O3
TARGET_ARCH ?= -m64
threads 	:= -lpthread

# Always emit debug symbols in case of core dumps
OPT_FLAG += -g

define_flags := $(strip @HEXADECAPOLE@ @FLAG_RTFORCE@ @FLAG_DIFFHARMONIC@	\
				@FLAG_CHANGESOFT@ @FLAG_BIGKEYS@ @FLAG_DTADJUST@ @FLAG_SSE@ \
				@FLAG_KERNEL@ @FLAG_COOLING@ @FLAG_DIFFUSION@ @FLAG_AVX@	\
				@FLAG_FEEDBACKDIFFLIMIT@ @FLAG_CULLENALPHA@ @FLAG_VSIGVISC@ \
				@FLAG_DAMPING@ $(debug_defines) $(interlist)				\
				$(flag_tree_build) -DREDUCTION_HELPER)

module_flags := $(strip -language charm++ -balancer @DEFAULT_LB@	\
				  $(foreach m,$(charm_modules),-module $(m))		\
				  $(foreach m,$(changa_modules),-module $(m)))

LDFLAGS = $(module_flags) -L. -L@CHARM_PATH@/libs @LDFLAGS@

include_flags = $(strip -I$(structures_path) -I$(cache_lib_path)	\
				-I$(source_dir) -I$(threadsafe_ht_path)				\
				-I$(charm_util_path) -I@CHARM_PATH@/include)

CPPFLAGS ?= $(include_flags) $(define_flags) @CPPFLAGS@
CFLAGS 	 ?= $(OPT_FLAG) $(CPPFLAGS) $(threads) $(TARGET_ARCH) -std=$(c_std)
CXXFLAGS ?= $(OPT_FLAG) $(CPPFLAGS) $(threads) $(TARGET_ARCH) -std=$(cxx_std)
LDLIBS 	 ?= $(structures_path)/libTipsy.a $(threads) @LIBS@

ifeq (1,$(DEBUG))
	LDLIBS	 += -memory charmdebug
	OPT_FLAG  = -O0
	target	 := $(target).dbg
	charmrun := $(charmrun).dbg
endif

ifeq (yes,@PROJECTIONS@)
	LDLIBS 	 += -tracemode projections
	target 	 := $(target).prj
	charmrun := $(charmrun).prj
endif

# Capture all sources except the ones for cooling
sources := $(filter-out $(source_dir)/cooling%,$(wildcard	\
				$(addprefix $(source_dir)/,*.c *.C *.cpp)))

ci_headers := $(patsubst %.ci,%.decl.h,$(wildcard $(source_dir)/*.ci))

objects := $(strip $(addprefix 												\
			$(build_dir)/,$(patsubst %.cpp,%.o,$(filter %.cpp,$(sources)))	\
			$(patsubst %.C,%.o,$(filter %.C,$(sources)))					\
			$(patsubst %.c,%.o,$(filter %.c,$(sources)))					\
			@OBJECTS_COOLING@												\
			))

# ------- Dependencies --------------------------------------------------------
depend_flags 	:= -MMD -MP -MF
depend_dir	 	:= $(build_dir)/.
depend_suffix 	:= .d
depend_files    := $(wildcard $(depend_dir)/*$(depend_suffix))

# ------- CUDA ----------------------------------------------------------------
# Do not move this include. cuda.mk assumes all of the compiler flags are
# defined before it is parsed.
ifeq (yes,@ENABLE_CUDA@)
	-include cuda.mk	# Use a conditional include so seqential cleans work
	LDFLAGS      += $(cuda_ldflags)
	LDLIBS       += $(cuda_libs)
	objects      += $(cuda_objects)
	define_flags += $(cuda_defines)
endif

# ------- Build targets -------------------------------------------------------
all: $(target)

.PHONY: show_config
show_config:
	@ echo TARGET = $(target)"\n"
	@ echo INCLUDES = $(include_flags)"\n"
	@ echo DEFINE_FLAGS = $(define_flags)"\n"
	@ echo OPT_FLAG = $(OPT_FLAG)"\n"
	@ echo DEFAULT_LB = @DEFAULT_LB@"\n"
	@ echo TARGET_ARCH = $(TARGET_ARCH)"\n"
	@ echo CXX_STD = $(cxx_std)"\n"
	@ echo C_STD = $(c_std)"\n"
	@ echo LDFLAGS = $(LDFLAGS)"\n"
	@ echo LDLIBS = $(LDLIBS)"\n"

$(source_dir)/%.decl.h: $(source_dir)/%.ci
	@ echo Compiling $<...
	$(quiet) $(charmc) -E $(define_flags) $<

%.o: Makefile

$(filter %.cpp,$(sources)): $(ci_headers)
$(filter %.C,$(sources)): $(ci_headers)

%.o: $(source_dir)/%.C
	@ echo Compiling $*.C...
	$(quiet) $(charmc) $(CXXFLAGS) $(depend_flags) $(depend_dir)/$*$(depend_suffix) -c $< -o $@

%.o: $(source_dir)/%.cpp
	@ echo Compiling $*.cpp...
	$(quiet) $(charmc) $(CXXFLAGS) $(depend_flags) $(depend_dir)/$*$(depend_suffix) -c $< -o $@

%.o: $(source_dir)/%.c
	@ echo Compiling $*.c...
	$(quiet) $(charmc) $(CFLAGS) $(depend_flags) $(depend_dir)/$*$(depend_suffix) -c $< -o $@

-include $(depend_files)

$(target): $(objects) $(structures_path)/libTipsy.a $(foreach m,$(changa_modules),libmodule$(m).a)
	@ echo Building $@...
	$(quiet) $(charmc) -o $(target) $(LDFLAGS) $(objects) $(LDLIBS)
ifneq (charmrun,$(charmrun))
	$(quiet) mv charmrun $(charmrun)
endif

VERSION: VERSION.new
	$(quiet) $(source_dir)/commitid.sh

cha_commitid.c: VERSION
	@ echo "const char * const Cha_CommitID = \"`cat $<`\";" > $@

$(structures_path)/libTipsy.a:
	$(quiet) cd $(structures_path); $(MAKE) DEBUG='$(DEBUG)' libTipsy.a

libmodule%.a: %.o
	@ echo Creating library $@...
	$(quiet) $(AR) $@ $^

.PHONY: docs
docs:
	@ Building docs...
	$(quiet) doxygen $(source_dir)/Doxyfile

.PHONY: test
test: DIRS := teststep
test: $(target)
	$(quiet) for d in $(DIRS); do \
		(cd $$d && $(MAKE) test OPTS='$(OPT_FLAG) $(threads)' || exit 1) || exit 1; \
	done

.PHONY: clean
clean:
	@ echo Cleaning...
	$(quiet) $(RM) $(objects) *~ $(target) *.decl.h *.def.h $(charmrun) $(depend_files)
	$(quiet) $(RM) $(foreach m,$(changa_modules),libmodule$(m).a)
	$(quiet) cd $(structures_path); $(MAKE) clean

.PHONY: dist-clean
dist-clean: clean
	$(quiet) $(RM) config.status config.log config.h Makefile

.PHONY: full-clean
full-clean: dist-clean
	$(quiet) $(RMR) autom4te.cache configure 

# for backwards compatibility
.PHONY: ref-clean
ref-clean:
.PHONY: depends
depends:
