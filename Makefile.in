# This Makefile uses the GNU make convention that CAPITAL_NAMES are reserved
# for variables that are either derived from the environment or are explicitly
# set by the user during invocation.

.DEFAULT_GOAL := all

# ChaNGa source directory
source_dir := @srcdir@

# Directory from which `configure` was called.
build_dir := @builddir@

# ------- Basic commands ------------------------------------------------------
AR 		:= @AR@
RM 		:= rm -f
RMR		:= $(RM) -r
quiet	:= $(if $(filter $(VERBOSE),1),,@)

# ------- Top-level configurations --------------------------------------------
interlist := -DINTERLIST_VER=2	# enable interaction lists

# ------- Tree building: Use **ONLY ONE** of these ----------------------------
#	-DMERGE_REMOTE_REQUESTS		# merges remote requests before sending; local trees built after requests sent
#	-DSPLIT_PHASE_TREE_BUILD	# no merging of remote requests on PE; local trees built after requests sent
flag_tree_build := -DMERGE_REMOTE_REQUESTS

# ------- Debugging -----------------------------------------------------------
#	-DPRINT_MERGED_TREE 
#	-DCOSMO_PRINT=1       			# enable really verbose prints
#	-DCOSMO_PRINT_BK=2    			# enable verbose book-keeping prints
#	-DCOSMO_DEBUG=2       			# enable debugging information
#	-DMCLBMSV						# Multistepping LB verbosity
#	-DCOSMO_STATS=1					# enable statistics collection
#	-DCHANGA_REFACTOR_WALKCHECK
#	-DCHANGA_REFACTOR_WALKCHECK_INTERLIST
#	-DCHANGA_REFACTOR_MEMCHECK
#	-DCHANGA_REFACTOR_INTERLIST_PRINT_LIST_STATE
#	-DCHANGA_REFACTOR_PRINT_INTERACTIONS
# Check walk correctness and trace walk for TEST_BUCKET on TEST_TP:
#	-DCHANGA_REFACTOR_WALKCHECK_INTERLIST
#	-DCHANGA_REFACTOR_INTERLIST_PRINT_LIST_STATE
#	-DCHECK_WALK_COMPLETIONS
debug_defines =

ifeq (1,$(DEBUG))
	debug_defines += -DCOSMO_DEBUG=2
endif

HEXADECAPOLE = @HEXADECAPOLE@	    # use hexadecapole gravity expansions
FLAG_SSE = @FLAG_SSE@
FLAG_AVX = @FLAG_AVX@
FLAG_CHANGESOFT = @FLAG_CHANGESOFT@
FLAG_BIGKEYS = @FLAG_BIGKEYS@
FLAG_DTADJUST = @FLAG_DTADJUST@
KERNEL_FLAGS = @KERNEL_FLAGS@
FLAG_COOLING = @FLAG_COOLING@
FLAG_DIFFUSION = @FLAG_DIFFUSION@
FLAG_RTFORCE = @FLAG_RTFORCE@
FLAG_DIFFHARMONIC = @FLAG_DIFFHARMONIC@
FLAG_FEEDBACKDIFFLIMIT = @FLAG_FEEDBACKDIFFLIMIT@
FLAG_CULLENALPHA = @FLAG_CULLENALPHA@
FLAG_VSIGVISC = @FLAG_VSIGVISC@
FLAG_DAMPING = @FLAG_DAMPING@

DEFINE_FLAGS = $(FLAG_PRINT) $(FLAG_STATISTICS) $(FLAG_DEBUG) $(CACHE_TREE) \
	       $(interlist) $(HEXADECAPOLE) $(FLAG_COOLING) $(FLAG_BIGKEYS) \
	       $(FLAG_DIFFUSION) $(FLAG_RTFORCE) \
               $(FLAG_DIFFHARMONIC) $(FLAG_FEEDBACKDIFFLIMIT) \
	       $(FLAG_CULLENALPHA) $(FLAG_VSIGVISC) \
	       $(FLAG_DTADJUST) $(FLAG_REFACTOR) \
               $(MULTISTEP_LOADBALANCING_VERBOSE) \
               $(ORB3DLB_LOADBALANCING_VERBOSE) $(CUDA) \
	       -DREDUCTION_HELPER $(flag_tree_build) \
               $(FLAG_DIFFHARMONIC) $(FLAG_FEEDBACKDIFFLIMIT) \
               $(FLAG_SSE) $(FLAG_AVX) @FLAG_FLOAT@ \
	       $(FLAG_CHANGESOFT) $(FLAG_DAMPING) \
	       $(KERNEL_FLAGS) $(GPU_LOCAL_TREE_WALK)

# ------- Include paths -------------------------------------------------------
structures_path 	:= $(source_dir)/../utility/structures
charm_util_path 	:= @CHARM_PATH@/src/util
cache_lib_path 		:= @CHARM_PATH@/tmp/libs/ck-libs/cache
threadsafe_ht_path 	:= $(cache_lib_path)/threadsafe_hashtable

# add -module Orb3dLB here for load balancing during singlestepped runs
INCLUDE_FLAGS += -I$(STRUCTURES_PATH) -I.. -I$(CACHE_LIB_PATH) -I$(THREADSAFE_HT_PATH) -I$(SOURCE_DIR) -I$(BUILD_DIR) -I$(CHARM_UTIL_PATH)
CPPFLAGS += $(INCLUDE_FLAGS) $(DEFINE_FLAGS) @CPPFLAGS@
CXXFLAGS += $(CPPFLAGS)
LDFLAGS += -L. -L../libs @LDFLAGS@ -language charm++ -module CkCache \
	   -module CkIO -module CkMulticast -module RefineLB \
	   -module RefineCommLB -module GreedyLB -module GreedyCommLB \
	   -module OrbLB -module RotateLB -module MultistepLB \
	   -module MultistepLB_notopo -module MultistepNodeLB_notopo \
           -module MultistepOrbLB -module Orb3dLB -module Orb3dLB_notopo \
           -module HierarchOrbLB -module liveViz -module CkLoop \
           -balancer MultistepLB_notopo \
	   #-tracemode projections -memory charmdebug -memory paranoid
XDR_DIR = ../rpc
XDR_OBJS = $(XDR_DIR)/xdr.o $(XDR_DIR)/xdr_float.o $(XDR_DIR)/xdr_mem.o $(XDR_DIR)/xdr_stdio.o
LDLIBS += $(STRUCTURES_PATH)/libTipsy.a  @LIBS@

CHARMC = $(CHARM_PATH)/bin/charmc

CXX = $(CHARMC)
CC = $(CXX)
AR = @AR@ 
CXX_DEPEND = $(CXX) -M -MM -MG $(CXXFLAGS)
CFLAGS = $(DEFINE_FLAGS) -I$(SOURCE_DIR) -I$(BUILD_DIR) @CFLAGS@ @CPPFLAGS@

# Orb3dLB.{o,C} below
OBJECTS = Reductions.o DataManager.o TreePiece.o IntraNodeLBManager.o Sorter.o \
	  param.o GenericTreeNode.o ParallelGravity.o Ewald.o \
	  InOutput.o cosmo.o romberg.o runge.o dumpframe.o dffuncs.o \
	  moments.o MultistepLB.o Orb3dLB.o Orb3dLB_notopo.o HierarchOrbLB.o \
	  MultistepLB_notopo.o MultistepNodeLB_notopo.o MultistepOrbLB.o PETreeMerger.o \
	  TreeWalk.o Compute.o CacheInterface.o smooth.o Sph.o starform.o \
	  feedback.o imf.o supernova.o supernovaia.o starlifetime.o \
	  sinks.o \
	  cha_commitid.o externalGravity.o \
	  @OBJECTS_COOLING@

SRSC = Reductions.cpp DataManager.cpp Sorter.cpp TreePiece.cpp IntraNodeLBManager.cpp \
	param.c GenericTreeNode.cpp ParallelGravity.cpp Ewald.cpp \
	InOutput.cpp cosmo.c romberg.c runge.c dumpframe.cpp dffuncs.cpp \
	moments.c MultistepLB.cpp Orb3dLB.cpp Orb3dLB_notopo.cpp HierarchOrbLB.cpp starform.cpp \
	MultistepLB_notopo.cpp MultistepNodeLB_notopo.cpp MultistepOrbLB.cpp PETreeMerger.cpp \
	TreeWalk.cpp Compute.cpp CacheInterface.cpp smooth.cpp Sph.cpp externalGravity.cpp \
	starform.cpp feedback.cpp imf.cpp supernova.cpp supernovaia.cpp starlifetime.cpp \
	sinks.cpp

# ------- CUDA ----------------------------------------------------------------
# Do not move this include. cuda.mk assumes all of the compiler flags are
# defined before it is parsed.
ifeq (yes,@ENABLE_CUDA@)
	-include cuda.mk	# Use a conditional include so seqential cleans work
	LDFLAGS      += $(cuda_ldflags)
	LDLIBS       += $(cuda_libs)
	objects      += $(cuda_objects)
	define_flags += $(cuda_defines)
endif

TARGET = ChaNGa
VERSION = 1.0
all: $(TARGET)

# Make's built-in database doesn't provide pattern rules for out-of-source
# builds, so we provide them here.
%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

%.o: $(SOURCE_DIR)/%.c
	$(CC) $(CFLAGS) -c -o $@ $<


$(TARGET): $(OBJECTS) $(STRUCTURES_PATH)/libTipsy.a libmoduleMultistepLB.a libmoduleOrb3dLB.a libmoduleOrb3dLB_notopo.a libmoduleHierarchOrbLB.a libmoduleMultistepLB_notopo.a libmoduleMultistepNodeLB_notopo.a libmoduleMultistepOrbLB.a
	$(CHARMC) -o $(TARGET) $(LDFLAGS) $(OBJECTS) $(LDLIBS)

$(TARGET).prj: $(OBJECTS) $(STRUCTURES_PATH)/libTipsy.a libmoduleMultistepLB.a libmoduleOrb3dLB.a libmoduleOrb3dLB_notopo.a libmoduleHierarchOrbLB.a libmoduleMultistepLB_notopo.a libmoduleMultistepNodeLB_notopo.a libmoduleMultistepOrbLB.a
	$(CHARMC) -o $(TARGET).prj $(LDFLAGS) $(OBJECTS) $(LDLIBS) -tracemode projections

$(TARGET).%: $(TARGET)
	mv $(TARGET) $@
	mv charmrun charmrun.$*


VERSION: VERSION.new
	$(SOURCE_DIR)/commitid.sh

cha_commitid.c: VERSION
	echo "extern const char * const Cha_CommitID;" > $@
	echo "const char * const Cha_CommitID = \"`cat $<`\";" >> $@
cha_commitid.o: CC=$(CHARMC)

$(STRUCTURES_PATH)/libTipsy.a:
	cd $(STRUCTURES_PATH); $(MAKE) libTipsy.a

libmoduleMultistepLB.a: MultistepLB.o
	$(CHARMC) -o libmoduleMultistepLB.a MultistepLB.o 

libmoduleMultistepOrbLB.a: MultistepOrbLB.o
	$(CHARMC) -o libmoduleMultistepOrbLB.a MultistepOrbLB.o 

libmoduleMultistepLB_notopo.a: MultistepLB_notopo.o
	$(CHARMC) -o libmoduleMultistepLB_notopo.a MultistepLB_notopo.o 

libmoduleMultistepNodeLB_notopo.a: MultistepNodeLB_notopo.o
	$(CHARMC) -o libmoduleMultistepNodeLB_notopo.a MultistepNodeLB_notopo.o 

libmoduleOrb3dLB.a: Orb3dLB.o
	$(CHARMC) -o libmoduleOrb3dLB.a Orb3dLB.o 

libmoduleOrb3dLB_notopo.a: Orb3dLB_notopo.o
	$(CHARMC) -o libmoduleOrb3dLB_notopo.a Orb3dLB_notopo.o 

libmoduleHierarchOrbLB.a: HierarchOrbLB.o
	$(CHARMC) -o libmoduleHierarchOrbLB.a HierarchOrbLB.o

%.ci.stamp: $(SOURCE_DIR)/%.ci
	$(CHARMC) -E $(DEFINE_FLAGS) $<
	touch $@

%.decl.h %.def.h: %.ci.stamp
	@true

Makefile: $(SOURCE_DIR)/Makefile.in
	@echo 'Makefile.in changed; re-running `configure`'
	@$(BUILD_DIR)/config.status
%.o: Makefile

docs:
	doxygen $(SOURCE_DIR)/Doxyfile

DIRS = teststep

test: $(TARGET)
	for d in $(DIRS); do \
		(cd $$d && $(MAKE) test || exit 1) || exit 1; \
	done

dist:
	mkdir $(TARGET)-$(VERSION)
	cp Makefile $(TARGET).doxygen *.h *.cpp *.ci $(TARGET)-$(VERSION)/
	tar zcf $(TARGET)-$(VERSION).tar.gz $(TARGET)-$(VERSION)
	rm -Rf $(TARGET)-$(VERSION)

clean:
	rm -f core* $(OBJECTS) *~ $(TARGET) *.decl.h *.def.h *.ci.stamp charmrun conv-host
	rm -f *.o *.a
	cd $(STRUCTURES_PATH); $(MAKE) clean

ref-clean:
	rm -f $(TARGET) Compute.o TreeWalk.o

dist-clean: clean
	@ $(RM) *.a config.status config.log cuda.mk Makefile.dep

depends: $(SOURCE_DIR)/Makefile.dep
$(BUILD_DIR)/Makefile.dep:
	FULLPATHS=""; for file in $(SRSC); do FULLPATHS="$(SOURCE_DIR)/$$file $$FULLPATHS"; done; \
	$(CXX_DEPEND) $$FULLPATHS | while read i;do echo $$i| awk -F' ' '{for (i=1;i<NF;++i) print $$i" \\"}';echo;done|grep -v "$(CHARM_PATH)/bin" | grep -v "hashtable_mt.h" > $@

# depend:
# 	$(CXX_DEPEND) $(SRSC) > Makefile.dep

# The following line is a script usable to regenerate the dependace file,
# without the inclusion of charm headers.
# $CHARM_DIR/bin/charmc  -M -MM -MG -O3 -I../utility/structures -I../ParallelGravity -Wall  -DCOSMO_STATS=1   -DCOSMO_DEBUG=2  -DINTERLIST_VER=2 -DHEXADECAPOLE     -DCACHE_TREE -DCOOLING_NONE  Reductions.cpp DataManager.cpp Sorter.cpp TreePiece.cpp param.cpp GenericTreeNode.cpp ParallelGravity.cpp Ewald.cpp InOutput.cpp cosmo.cpp romberg.cpp runge.cpp dumpframe.cpp dffuncs.cpp moments.cpp MultistepLB.cpp Orb3dLB.cpp TreeWalk.cpp Compute.cpp | while read i;do echo $i| awk -F' ' '{for (i=1;i<NF;++i) print $i" \\"}';echo;done|grep -v "charm/bin" > Makefile.dep

.PHONY: all docs dist clean depend test VERSION.new

-include $(BUILD_DIR)/Makefile.dep
